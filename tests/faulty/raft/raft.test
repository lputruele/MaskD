Enum MSG = {null, accept, entry};
Enum STATE = {available, unavailable};
Enum ENTRYSTATE = {uncommitted, committed};


Global lToF1,lToF2 : MSG;


Process Leader{
	command: ENTRYSTATE;
	Initial: lToF1 == null && lToF2 == null && command == uncommitted;
	Normative: true;
		[sendEntry1] lToF1 == null && command == uncommitted -> lToF1 = entry;
		[sendEntry2] lToF2 == null && command == uncommitted -> lToF2 = entry;
		[sendEntry1] lToF1 == accept && command == uncommitted -> lToF1 = accept;
		[sendEntry2] lToF2 == accept && command == uncommitted -> lToF2 = accept;
		[commitEntry] lToF1 == accept && lToF2 == accept && command == uncommitted -> command = committed;
}

Process Follower(recChan : MSG){
	s: STATE;
	Initial:  lToF1 == null && lToF2 == null && s == available;
	Normative: true;
		[receiveEntry] !(s == unavailable) && recChan == entry -> recChan = accept;
		[receiveEntry] s == unavailable && recChan == entry -> recChan = null;
		[rejectEntry] recChan == entry -> recChan = null;
		[crash] faulty !(s == unavailable) -> s = unavailable;	
}



Main(){
    leader:Leader;
    f1:Follower;
    f2:Follower;
    run leader();
    run f1(lToF1);
    run f2(lToF2);
}